View(reduced_dataset)
View(reduced_dataset)
View(reduced_dataset)
svd_model<-svd(dataset)
View(svd_model)
dim(svd_model$d)
dim(svd_model$u)
svd_model$d
View(svd_model)
diag(svd_model$d)
reduced_dataset<-as.matrix(svd_model$u)%*%diag(as.matrix(svd_model$d))%*%as.matrix(svd_model$v)
reduced_dataset<-as.matrix(svd_model$u)%*%diag(as.matrix(svd_model$d))%*%t(as.matrix(svd_model$v))
dim(as.matrix(svd_model$u))
dim(t(as.matrix(svd_model$v))
dim(t(as.matrix(svd_model$u))
dim(t(as.matrix(svd_model$u)))
dim(diag(as.matrix(svd_model$d)))
diag(as.matrix(svd_model$d))
diag(svd_model$d)
reduced_dataset<-as.matrix(svd_model$u)%*%diag(svd_model$d)%*%t(as.matrix(svd_model$v))
summary(diag(svd_model$d))
View(reduced_dataset)
View(dataset)
new_dim<-10
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-diag(svd_model$d)[new_dim,new_dim]
v_svd<-t(as.matrix(svd_model$v))[new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
View(reduced_dataset)
View(reduced_dataset)
d_svd<-diag(svd_model$d)[new_dim,new_dim]
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
svd_model<-svd(dataset)
d_svd<-diag(svd_model$d)[new_dim,new_dim]
d_svd<-diag(svd_model$d)
d_svd<-as.matrix(diag(svd_model$d))[new_dim,new_dim]
v_svd<-t(as.matrix(svd_model$v))[new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
d_svd<-as.matrix(diag(svd_model$d))[new_dim,new_dim]
d_svd<-as.matrix(diag(svd_model$d))
d_svd<-as.matrix(diag(svd_model$d))[new_dim,]
d_svd<-as.matrix(diag(svd_model$d))
View(d_svd)
v_svd<-t(as.matrix(svd_model$v))[new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d))[,1:new_dim]
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
d_svd<-as.matrix(diag(svd_model$d))[1:new_dim,]
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
v_svd<-t(as.matrix(svd_model$v)[1:new_dim,])
reduced_dataset<-u_svd%*%d_svd%*%v_svd
svd_model$v
dim(svd_model$v)
svd_model$d
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
return reduced_dataset
svd_reduce<-function(dataset,new_dim){
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
return reduced_dataset
}
svd_reduce<-function(dataset,new_dim){
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
return reduced_dataset
}
svd_reduce<-function(dataset,new_dim){
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
return reduced_dataset
}
dataset=read.table("wine.data",sep=",")
svd_model<-svd(dataset)
new_dim<-3
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
return reduced_dataset
dataset=read.table("wine.data",sep=",")
#SVD
svd_dataset<-svd_reduce(dataset,10)
source("SVD.r")
return(reduced_dataset)
#SVD
svd_dataset<-svd_reduce(dataset,10)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(dataset,10)
source("FLD.r")
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(dataset,10)
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#SVD
svd_dataset<-svd_reduce(x,new_dim)
#SVD
svd_dataset<-svd_reduce(x,new_dim)
classifier<-svm(formula=V1~.,data=svd_dataset, type='C-classification',kernel='linear')
library(e1071)
library(MASS)
classifier<-svm(formula=V1~.,data=svd_dataset, type='C-classification',kernel='linear')
View(svd_dataset)
#SVD
svd_dataset<-svd_reduce(x,new_dim)
classifier<-svm(formula=X1~.,data=svd_dataset, type='C-classification',kernel='linear')
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
classifier<-svm(formula=X1~.,data=svd_dataset, type='C-classification',kernel='linear')
View(svd_dataset)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
classifier<-svm(formula=X1~.,data=svd_dataset, type='C-classification',kernel='linear')
View(svd_dataset)
svd_model<-svd(x)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_x<-u_svd%*%d_svd%*%v_svd
reduced_dataset<-data.fr
svd_model<-svd(x)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_x<-u_svd%*%d_svd%*%v_svd
reduced_dataset<-data.frame(cbind(y,reduced_x))
View(reduced_dataset)
View(reduced_x)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,new_dim)
dataset=read.table("wine.data",sep=",")
svd_model<-svd(dataset)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
new_dim<-5
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
v_svd<-t(as.matrix(svd_model$v))[,1:new_dim]
v_svd<-t(as.matrix(svd_model$v))[1:new_dim,]
reduced_dataset<-u_svd%*%d_svd%*%v_svd
reduced_dataset<-data.frame(reduced_dataset)
View(reduced_dataset)
v_svd<-t(as.matrix(svd_model$v)[1:new_dim,])
reduced_dataset<-u_svd%*%d_svd%*%v_svd
v_svd<-t(as.matrix(svd_model$v)[,1:new_dim])
reduced_dataset<-u_svd%*%d_svd%*%v_svd
#SVD
svd_dataset<-svd_reduce(x,new_dim)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,new_dim)
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#SVD
svd_dataset<-svd_reduce(x,new_dim)
classifier<-svm(formula=X1~.,data=svd_dataset, type='C-classification',kernel='linear')
View(dataset)
View(svd_dataset)
svd_reduce<-function(x,y,new_dim){
svd_model<-svd(x)
u_svd<-as.matrix(svd_model$u)[,1:new_dim]
d_svd<-as.matrix(diag(svd_model$d[1:new_dim]))
v_svd<-t(as.matrix(svd_model$v)[,1:new_dim])
reduced_x<-u_svd%*%d_svd%*%v_svd
reduced_dataset<-data.frame(cbind(y,reduced_x))
return(reduced_dataset)
}
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
source("SVD.r")
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
classifier<-svm(formula=X1~.,data=svd_dataset, type='C-classification',kernel='linear')
View(svd_dataset)
classifier<-svm(formula=y~.,data=svd_dataset, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = dataset[,-1])
y_act<-dataset[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
prin_comp<-prcomp(scale(x))
View(prin_comp)
View(x)
prin_comp$x
dim(prin_comp$x)
prin_comp$x[,1]
pca<-preProcess(x,method='pca',pcaComp=new_dim)
library(e1071)
pca<-preProcess(x,method='pca',pcaComp=new_dim)
library(caret)
pca<-data.frame(prin_comp$x)
View(pca)
#install.packages('e1071')
install.packages('caret')
library(caret)
pca<-preProcess(x,method='pca',pcaComp=new_dim)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
View(pca)
pca<-preProcess(x,method='pca',pcaComp=new_dim)
View(pca)
pca_reduce<-function(x,y,new_dim){
pca<-prcomp(x, center = TRUE, scale. = TRUE)
reduced_x<-pca$rotation[,1:new_dim]
reduced_dataset<-data.frame(cbind(y,reduced_x))
return(reduced_dataset)
}
#install.packages('e1071')
setwd(".")
source("FLD.r")
source("SVD.r")
library(e1071)
library(MASS)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.8)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
reduced_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(reduced_dataset,split==TRUE)
testing_set<-subset(reduced_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)  #reduces
classifier<-svm(formula=y~.,data=svd_dataset, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = dataset[,-1])
y_act<-dataset[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
source("PCA.r")
setwd(".")
source("FLD.r")
source("SVD.r")
source("PCA.r")
library(e1071)
library(MASS)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.8)
library(caTools)
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.8)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
reduced_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(reduced_dataset,split==TRUE)
testing_set<-subset(reduced_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)  #reduces
classifier<-svm(formula=y~.,data=svd_dataset, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = dataset[,-1])
y_act<-dataset[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
View(pca_dataset)
pca_reduce<-function(x,y,new_dim){
pca<-prcomp(x, center = TRUE, scale. = TRUE)
reduced_x<-pca$rotation[,1:new_dim]
reduced_dataset<-data.frame(cbind(y,reduced_x))
return(reduced_dataset)
}
pca<-prcomp(x, center = TRUE, scale. = TRUE)
View(pca)
pca$x
dim(pca$x)
pca<-prcomp(x, retx=TRUE, center = TRUE, scale. = TRUE)
reduced_x<-pca$x
reduced_x<-pca$x[,1:new_dim]
reduced_dataset<-data.frame(cbind(y,reduced_x))
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
View(pca_dataset)
classifier<-svm(formula=y~.,data=pca_dataset, type='C-classification',kernel='linear')
dataset
classifier<-svm(formula=y~.,data=pca_dataset, type='C-classification',kernel='linear')
training_set<-subset(pca_dataset,split==TRUE)
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-dataset[,1]
cm<-table(y_act,y_pred)
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=svd_dataset, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
fld_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(fld_dataset,split==TRUE)
testing_set<-subset(fld_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
fld_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(fld_dataset,split==TRUE)
testing_set<-subset(fld_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
