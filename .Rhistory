library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
#install.packages('e1071')
setwd(".")
dataset=read.table("wine.data",sep=",")
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
#install.packages('e1071')
setwd(".")
#Include files
source("FLD.r")
#install.packages('e1071')
setwd("./")
#Include files
source("FLD.r")
source("SVD.r")
#Include files
source("./FLD.r")
getwd()
getwd()
dirname(rstudioapi::getSourceEditorContext()$path)
#install.packages('e1071')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Include files
source("./FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-5
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
fld_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(fld_dataset,split==TRUE)
testing_set<-subset(fld_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Kernel PCA
#Kernel PCA
#SVD
svd_dataset<-svd_reduce(x,y,new_dim)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,1)
training_set<-subset(svd_dataset,split==TRUE)
#SVD
svd_dataset<-svd_reduce(x,y,2)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,13)
#SVD
svd_dataset<-svd_reduce(x,y,10)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#Classifier for Fisher Linear Discriminant
fld_dataset<-fld_reduce(x,y,new_dim)
training_set<-subset(fld_dataset,split==TRUE)
testing_set<-subset(fld_dataset,split==FALSE)
classifier<-svm(formula=X1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using FLD:-")
print(cm)
#SVD
svd_dataset<-svd_reduce(x,y,10)
training_set<-subset(svd_dataset,split==TRUE)
testing_set<-subset(svd_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for original:-")
print(cm)
#PCA
pca_dataset<-pca_reduce(x,y,new_dim)
training_set<-subset(pca_dataset,split==TRUE)
testing_set<-subset(pca_dataset,split==FALSE)
classifier<-svm(formula=y~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_act,y_pred)
print("Confusion matrix for reduced using PCA:-")
print(cm)
#Kernel PCA
kpca(dataset,type='vanilladot')
install.packages('kernlab')
library(kernlab)
#Kernel PCA
kpca(dataset,type='vanilladot')
#Kernel PCA
kds<-kpca(dataset,type='vanilladot')
View(kds)
#Kernel PCA
kds<-kpca(dataset[,1]~.dataset[,-1],type='vanilladot')
#Kernel PCA
kds<-kpca(~.dataset[,-1],type='vanilladot')
#Kernel PCA
kds<-kpca(dataset[,1]~.,dataset[,-1],type='vanilladot')
#Kernel PCA
kds<-kpca(~.,dataset[,-1],type='vanilladot')
kds$x
#install.packages('e1071')
#install.packages('kernlab')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Include files
source("./FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
library(kernlab)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-3
pca<-prcomp(x, retx=TRUE, center = TRUE, scale. = TRUE)
reduced_x<-pca$x[,1:new_dim]
View(pca)
View(reduced_x)
View(reduced_x)
View(x)
data<-letter.recognition
new_dim<-3
dataset=read.table("letter-recognition.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-3
View(dataset)
View(dataset)
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
View(training_set)
f<-lda(V1~.,data=training_set)
View(f)
predict(f,testing_set)
new<-predict(f,testing_set)
View(new)
new$class
nrow(new$class)
levels(new$class)
View(new)
View(x)
x<-as.data.frame(new$x)
View(x)
new<-predict(f,training_set)
View(new)
new<-predict(f,testing_set)
View(new)
new<-predict(f,training_set)
View(new)
View(testing_set)
View(new)
x<-dataset[,-1]
y<-dataset[,1]
pcletter<-prcomp(x,scale=TRUE,center=TRUE)$x[,1:10]
dataset=read.table("letter-recognition.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
pcletter<-prcomp(x,scale=TRUE,center=TRUE)$x[,1:10]
View(pcletter)
pcfinal<-cbind(pcletter,y)
View(pcfinal)
pcletter<-data.frame(pcletter)
pc<-cbind(pcletter,y)
View(pc)
#install.packages('e1071')
#install.packages('kernlab')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Include files
source("./FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
library(kernlab)
dataset=read.table("wine.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-3
#Classifier for original
set.seed(13)
split<-sample.split(dataset,SplitRatio = 0.7)
training_set<-subset(dataset,split==TRUE)
testing_set<-subset(dataset,split==FALSE)
classifier<-svm(formula=V1~.,data=training_set, type='C-classification',kernel='linear')
y_pred<-predict(classifier, newdata = testing_set[,-1])
y_act<-testing_set[,1]
cm<-table(y_pred,y_act)
print("Confusion matrix for original:-")
print(cm)
y_pred<-as.data.frame(predict(classifier, newdata = testing_set[,-1]))
y_act<-testing_set[,1]
cm<-table(y_pred,y_act)
print("Confusion matrix for original:-")
#CALCULATION OF BETWEEN CLASS COVARIANCE
Sb<-St-Sw
#CALCULATION OF TOTAL SCATTER MATRIX
x_std<-as.matrix(sweep(x,1,global_mean))
St<-x_std%*%t(x_std)
#install.packages('e1071')
#install.packages('kernlab')
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#Include files
source("FLD.r")
source("SVD.r")
source("PCA.r")
#Include libraries
library(e1071)
library(MASS)
library(caTools)
library(kernlab)
dataset=read.table("letter-recognition.data",sep=",")
x<-dataset[,-1]
y<-dataset[,1]
new_dim<-3
install.packages("dml")
library(dml)
rca(dataset)
rca(x,y)
nca(x, y, A_init = diag(ncol(x)), N_iter = 100, learning_rate = 0.01)
install.packages("nca")
install.packages("NCA")
print(diag(3))
print(diag(4))
numeric(5)
seq_len
seq_len(5)
source('~/.active-rstudio-document')
nca <- function( x
, labels
, A_init = diag(ncol(x))
, N_iter=1e2
, learning_rate = 0.01
){
x <- as.matrix(x)
#labels <- as.factor(labels)
A <- A_init
N <- nrow(x)
stopifnot(NROW(x) == length(labels))
p <- numeric(N)
p_cum <- numeric(N_iter)
for (it in seq_len(N_iter)){
for (i in seq_len(N)){
# softmax, with LOO
D <- tcrossprod(A, x)       # (dA, N)
D <- (D - as.numeric(D[,i]))
p_ik <- exp(-colSums(D*D))       # (N)
p_ik[i] <- 0
softmax <- sum(p_ik)
if (softmax > .Machine$double.eps){
p_ik <- p_ik/sum(p_ik)             # (N)
}
# end softmax
# neighbors that predict the correct label
correct_label <- labels == labels[i]  # (N)
p[i] <- sum(p_ik[correct_label])
d    <- t(t(x) - as.numeric(x[i,]))  # (N, dx)
pd <- p_ik * d                    # (N, dx)
g <- (p[i]*crossprod(d, pd)) - crossprod(d[correct_label,], pd[correct_label,]) # (dx, dx)
A <- A + learning_rate * (A %*% g) # (dx, dA)
# d  <- t(x) - as.numeric(x[i,])  # (dx, N)
# d2 <- p_ik * colSums(d * d) # (N)
#
# A <- A + learning_rate * A * (p[i]*sum(d2) - sum(d2[correct_label]))
}
p_cum[it] <- sum(p)
}
list( A = A
, p = p
, A_norm = A/A[1,1]
, p_cum=p_cum
)
}
scaling <- function(x){
x_min <- apply(x, 2, min)
x <- sweep(x, 1, x_min)
x_max <- apply(x, 2, max)
diag(1/(x_max))
}
x <- iris[1:4]
x <- as.matrix(x)
labels <- iris[[5]]
A <- diag(ncol(x))
A <- scaling(x)
#pca <- prcomp(x)
#A <- t(pca$rotation[,1:2])
#A <- matrix(runif(4*2), ncol=4, nrow=4)
res <- nca(x=x, labels = labels, A_init = A, N_iter = 200, learning_rate = 1e-2)
res$A_norm
source("classifySVM")
#install.packages('e1071')
#install.packages('kernlab')
install.packages('remote')
remotes::install_github("edwindj/nca")
#install.packages('e1071')
#install.packages('kernlab')
install.packages('remotes')
remotes::install_github("edwindj/nca")
nca()
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
#install.packages('e1071')
#install.packages('kernlab')
#install.packages('remotes')
#remotes::install_github("edwindj/nca")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#install.packages('e1071')
#install.packages('kernlab')
#install.packages('remotes')
#remotes::install_github("edwindj/nca")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
#Applyng NCA
nca_dataset<-nca_reduce(x,y,new_dim)
var_list<-nca(x,y,A_init = diag(x=1,nrow = new_dim,ncol = ncol(x)))
transformation_matrix<-var_list$A_norm
View(var_list)
reduced_x<-t(reduced_x)
reduced_dataset<-cbind(y,reduced_x)
reduced_x<-transformation_matrix%*%t(x)
reduced_x<-t(reduced_x)
reduced_dataset<-cbind(y,reduced_x)
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
nca
library(remotes)
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
library(edwindj/nca)
library(edwindj)
library(remotes)
library(edwindj)
#install.packages('e1071')
#install.packages('kernlab')
#install.packages('remotes')
remotes::install_github("edwindj/nca")
library(remotes::edwindj)
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
source('C:/Users/Riddhesh/Desktop/Machine Learning/FLD/ML-Assignment/main.r')
#install.packages('e1071')
#install.packages('kernlab')
#install.packages('remotes')
remotes::install_github("edwindj/nca")
library(remotes::nca)
library(devtools)
install.packages('devtools')
library(devtools)
install_github("edwindj/nca")
install.packages("Rtools")
